#In this SQL, I'm querying a database with multiple tables in it to quantify statistics about customer and order data. 

#1 - how many orders were placed in January?

SELECT COUNT(orderid) -- total number of orders
FROM BIT_DB.JanSales 
WHERE length(orderid) = 6 -- filter out bad data
AND orderid <> 'Order ID'; -- filter out bad data

#2 - how many of those orders were for an iPhone?

SELECT COUNT(orderid) -- total number of iphones
FROM BIT_DB.JanSales
WHERE Product="iPhone" -- specifying iPhone
AND length(orderid) = 6 -- filter out bad data
AND orderid <> "Order ID"; -- filter out bad data

#3 - select the customer account numbers for all the orders that were placed in February

SELECT distinct acctnum -- add distinct so we dont see repeats
FROM BIT_DB.customers cust
JOIN BIT_DB.FebSales feb -- inner join since we want all the overlapping data
ON cust.order_id=feb.orderID
WHERE length(orderid) = 6 -- filter out bad data
AND orderid <> "Order ID"; -- filter out bad data

#4 - which product was the cheapest sold in January and what was the price?
SELECT distinct Product, Price -- will show product and price in table
FROM BIT_DB.JanSales
WHERE length(orderid) = 6 -- filter out bad data
AND orderid <> "Order ID" -- filter out bad data
ORDER BY Price ASC -- need to order by price asc so cheapest is on top
LIMIT 1; -- make sure only top result appears

# or solve like this

SELECT distinct Product, Price -- will show product and price in table
FROM BIT_DB.JanSales
WHERE price IN ( --  use IN to reference a query we've already run
SELECT MIN(price) FROM BIT_DB.JanSales) -- cheapest price in the table
AND length(orderid) = 6 -- filter out bad data
AND orderid <> "Order ID"; -- filter out bad data

#5 - what is the total revenue for each product sold in january?

SELECT Product, SUM(quantity)*price AS revenue -- quantity of each product sold times the price of each product
FROM BIT_DB.JanSales
WHERE length(orderid) = 6 -- filter out bad data
AND orderid <> "Order ID" -- filter out bad data
GROUP BY Product; -- so multiple of the same product are grouped into one

#6 - which products were sold in february at 548 Lincoln St, Seattle, WA 98101, how many were sold, and what was the total revenue?

SELECT 
Product
, sum(quantity) -- total quantity
, SUM(quantity)*price AS revenue -- total revenue
FROM BIT_DB.FebSales
WHERE location ="548 Lincoln St, Seattle, WA 98101" -- specify location
AND length(orderid) = 6 -- filter out bad data
AND orderid <> "Order ID" -- filter out bad data
GROUP BY Product; -- so multiple of the same product are grouped into one

#7 - how many customers ordered more than 2 products at a time in feb and what was the average amount spent for those customers?

SELECT 
count(distinct cust.acctnum) AS customer_count -- no repeat account numbers
, avg(quantity*price) AS revenue -- total revenue
FROM BIT_DB.FebSales feb
LEFT JOIN BIT_DB.customers cust -- only want feb sales records
ON cust.order_id=feb.orderID
WHERE feb.quantity>2 -- specify > 2 products purchased
AND length(orderid) = 6 -- filter out bad data
AND orderid <> "Order ID"; -- filter out bad data

#8 - list all the products sold in Los Angeles in February, and include how many of each were sold.

SELECT product, sum(quantity) -- adds up the number of each product
FROM BIT_DB.FebSales
WHERE location like -- like searches location column for what trails it
'%Los Angeles%' -- % make it so you dont need the exact string
GROUP BY product -- have to group by when using an aggregate

#9 - which locations in New York received at least 3 orders in January, and how many orders did they each receive?

SELECT distinct location, count(orderID)
FROM BIT_DB.JanSales
WHERE location like '%New York%'
AND length(orderid) = 6 -- filter out bad data
AND orderid <> "Order ID" -- filter out bad data
GROUP BY location
HAVING count(orderID) >=3; -- can also do >2, HAVING lets us aggregate after group by

#10 - How many of each type of headphone were sold in February?

SELECT product, sum(quantity)
FROM BIT_DB.FebSales
WHERE product like '%Headphone%'
AND length(orderid) = 6 -- filter out bad data
AND orderid <> "Order ID" -- filter out bad data
GROUP BY product;

#11 - What was the average amount spent per account in February? 

SELECT sum(quantity*price)/count(acctnum) as avg_amt_spent -- average amount spent / number of accounts
FROM BIT_DB.febsales february
LEFT JOIN BIT_DB.customers customer -- only want feb sales records
ON customer.order_id=february.orderID
WHERE length(orderid) = 6 
AND orderid <> 'Order ID';

#or

SELECT avg(quantity*price) -- using avg so you dont have to calculate yourself
FROM BIT_DB.febsales february
LEFT JOIN BIT_DB.customers customer -- only want feb sales records
ON customer.order_id=february.orderID
WHERE length(orderid) = 6 
AND orderid <> 'Order ID';

#12 - What was the average quantity of products purchased per account in February? 

SELECT sum(quantity)/count(customer.acctnum) as avg_prod_qty -- average qty / number of accounts
FROM BIT_DB.febsales february
LEFT JOIN BIT_DB.customers customer -- only want feb sales records
ON customer.order_id=february.orderID
WHERE length(orderid) = 6 
AND orderid <> 'Order ID';

#13 - Which product brought in the most revenue in January and how much revenue did it bring in total?

SELECT product, SUM(price*quantity) as revenue -- revenue = price*quantity of a product
FROM BIT_DB.JanSales
WHERE length(orderid) = 6 
AND orderid <> 'Order ID'
GROUP BY product
ORDER BY revenue DESC -- so highest is on top
LIMIT 1 -- so only the top earner is displayed
